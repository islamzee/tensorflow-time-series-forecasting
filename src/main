from importlibs import *
import glob

import csv
import datetime
from utility import *

input = prepareDataForNYISO('Name', 'LONGIL')
print(input.shape)
# (17842, 6)
# plt.plot(input.iloc[:,3][:2000])
# plt.show()

# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = input.iloc[:,3].values.astype('float32')
dataset = scaler.fit_transform(dataset.reshape(-1,1))

# split into train and test sets
train_size = int(len(dataset) * 0.67)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

# reshape into X=t and Y=t+1
look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

# reshape input to be [samples, time steps, features]
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

# create and fit the LSTM network
model = Sequential()
model.add(LSTM(4, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=EPOCH_SIZE, batch_size=BATCH_SIZE, verbose=2)

model.save(MODEL_FILE_NAME)  # creates a HDF5 file 'my_model.h5'
del model  # deletes the existing model

# returns a compiled model identical to the previous one
model = load_model(MODEL_FILE_NAME)
